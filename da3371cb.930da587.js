(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{163:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return p}));var n=a(1),o=a(9),r=(a(0),a(168)),i={id:"cli",title:"CLI"},c={id:"tooling/cli",title:"CLI",description:"We've built https://www.npmjs.com/package/@formatjs/cli that helps you extract messages from a list of files. It uses [`babel-plugin-react-intl`](https://www.npmjs.com/package/babel-plugin-react-intl) under the hood and should be able to extract messages if you're declaring using 1 of the mechanisms below:",source:"@site/docs/tooling/cli.md",permalink:"/docs/tooling/cli",editUrl:"https://github.com/formatjs/formatjs/edit/master/website/docs/tooling/cli.md",sidebar:"tooling",next:{title:"eslint-plugin-formatjs",permalink:"/docs/tooling/linter"}},l=[{value:"Usage",id:"usage",children:[]},{value:"Options",id:"options",children:[{value:"<code>--messages-dir [dir]</code>",id:"--messages-dir-dir",children:[]},{value:"<code>--out-file [path]</code>",id:"--out-file-path",children:[]},{value:"<code>--id-interpolation-pattern [pattern]</code>",id:"--id-interpolation-pattern-pattern",children:[]},{value:"<code>--extract-source-location</code>",id:"--extract-source-location",children:[]},{value:"<code>--module-source-name [name]</code>",id:"--module-source-name-name",children:[]},{value:"<code>--additional-component-names [comma-separated-names]</code>",id:"--additional-component-names-comma-separated-names",children:[]},{value:"<code>--extract-from-format-message-call</code>",id:"--extract-from-format-message-call",children:[]},{value:"<code>--output-empty-json</code>",id:"--output-empty-json",children:[]},{value:"<code>--ignore [files]</code>",id:"--ignore-files",children:[]},{value:"<code>--throws</code>",id:"--throws",children:[]},{value:"<code>--pragma [pragma]</code>",id:"--pragma-pragma",children:[]}]}],s={rightToc:l};function p(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"We've built ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.npmjs.com/package/@formatjs/cli"}),"https://www.npmjs.com/package/@formatjs/cli")," that helps you extract messages from a list of files. It uses ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.npmjs.com/package/babel-plugin-react-intl"}),Object(r.b)("inlineCode",{parentName:"a"},"babel-plugin-react-intl"))," under the hood and should be able to extract messages if you're declaring using 1 of the mechanisms below:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"import {defineMessages} from 'react-intl';\n\ndefineMessages({\n  foo: {\n    id: 'foo',\n    defaultMessage: 'foo',\n    description: 'bar',\n  },\n});\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),'import {FormattedMessage} from \'react-intl\';\n\n<FormattedMessage id="foo" defaultMessage="foo" description="bar" />;\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"function Comp(props) {\n  const {intl} = props;\n  return intl.formatMessage({\n    // The whole `intl.formatMessage` is required so we can extract\n    id: 'foo',\n    defaultMessage: 'foo',\n    description: 'bar',\n  });\n}\n")),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"$ npm -g i @formatjs/cli\n$ formatjs extract --help\nUsage: formatjs extract [options] [files...]\n\nExtract string messages from React components that use react-intl.\nThe input language is expected to be TypeScript or ES2017 with JSX.\n")),Object(r.b)("h2",{id:"options"},"Options"),Object(r.b)("h3",{id:"--messages-dir-dir"},Object(r.b)("inlineCode",{parentName:"h3"},"--messages-dir [dir]")),Object(r.b)("p",null,"The target location where the plugin will output a ",Object(r.b)("inlineCode",{parentName:"p"},".json")," file corresponding to each component from which React Intl messages were extracted. If not provided, the extracted message descriptors will be printed to standard output."),Object(r.b)("h3",{id:"--out-file-path"},Object(r.b)("inlineCode",{parentName:"h3"},"--out-file [path]")),Object(r.b)("p",null,"The target file path where the plugin will output an aggregated ",Object(r.b)("inlineCode",{parentName:"p"},".json")," file of allthe translations from the ",Object(r.b)("inlineCode",{parentName:"p"},"files")," supplied. This flag will ignore ",Object(r.b)("inlineCode",{parentName:"p"},"--messages-dir")),Object(r.b)("h3",{id:"--id-interpolation-pattern-pattern"},Object(r.b)("inlineCode",{parentName:"h3"},"--id-interpolation-pattern [pattern]")),Object(r.b)("p",null,"If certain message descriptors don't have id, this ",Object(r.b)("inlineCode",{parentName:"p"},"pattern")," will be used to automaticallygenerate IDs for them. Default to ",Object(r.b)("inlineCode",{parentName:"p"},"[contenthash:5]"),". See ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/webpack/loader-utils#interpolatename"}),"https://github.com/webpack/loader-utils#interpolatename")," for sample patterns"),Object(r.b)("h3",{id:"--extract-source-location"},Object(r.b)("inlineCode",{parentName:"h3"},"--extract-source-location")),Object(r.b)("p",null,"Whether the metadata about the location of the message in the source file should be extracted. If ",Object(r.b)("inlineCode",{parentName:"p"},"true"),", then ",Object(r.b)("inlineCode",{parentName:"p"},"file"),", ",Object(r.b)("inlineCode",{parentName:"p"},"start"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"end")," fields will exist for each extracted message descriptors. (default: ",Object(r.b)("inlineCode",{parentName:"p"},"false"),")"),Object(r.b)("h3",{id:"--module-source-name-name"},Object(r.b)("inlineCode",{parentName:"h3"},"--module-source-name [name]")),Object(r.b)("p",null,"The ES6 module source name of the React Intl package. Defaults to: ",Object(r.b)("inlineCode",{parentName:"p"},'"react-intl"'),", but can be changed to another name/path to React Intl."),Object(r.b)("h3",{id:"--additional-component-names-comma-separated-names"},Object(r.b)("inlineCode",{parentName:"h3"},"--additional-component-names [comma-separated-names]")),Object(r.b)("p",null,"Additional component names to extract messages from, e.g: ",Object(r.b)("inlineCode",{parentName:"p"},"['FormattedFooBarMessage']"),". ",Object(r.b)("strong",{parentName:"p"},"NOTE"),": By default we check for the fact that ",Object(r.b)("inlineCode",{parentName:"p"},"FormattedMessage")," is imported from ",Object(r.b)("inlineCode",{parentName:"p"},"moduleSourceName")," to make sure variable alias works. This option does not do that so it's less safe."),Object(r.b)("h3",{id:"--extract-from-format-message-call"},Object(r.b)("inlineCode",{parentName:"h3"},"--extract-from-format-message-call")),Object(r.b)("p",null,"Opt-in to extract from ",Object(r.b)("inlineCode",{parentName:"p"},"intl.formatMessage")," call with the same restrictions, e.g: has to be called with object literal such as ",Object(r.b)("inlineCode",{parentName:"p"},"intl.formatMessage({ id: 'foo', defaultMessage: 'bar', description: 'baz'})")," (default: ",Object(r.b)("inlineCode",{parentName:"p"},"false"),")"),Object(r.b)("h3",{id:"--output-empty-json"},Object(r.b)("inlineCode",{parentName:"h3"},"--output-empty-json")),Object(r.b)("p",null,"Output file with empty [] if src has no messages. For build systems like ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://bazel.build/"}),"bazel")," that relies on specific output mapping, not writing out a file can cause issues. (default: ",Object(r.b)("inlineCode",{parentName:"p"},"false"),")"),Object(r.b)("h3",{id:"--ignore-files"},Object(r.b)("inlineCode",{parentName:"h3"},"--ignore [files]")),Object(r.b)("p",null,"List of glob paths to ",Object(r.b)("strong",{parentName:"p"},"not")," extract translations from."),Object(r.b)("h3",{id:"--throws"},Object(r.b)("inlineCode",{parentName:"h3"},"--throws")),Object(r.b)("p",null,"Whether to throw an exception when we fail to process any file in the batch."),Object(r.b)("h3",{id:"--pragma-pragma"},Object(r.b)("inlineCode",{parentName:"h3"},"--pragma [pragma]")),Object(r.b)("p",null,"Parse specific additional custom pragma. This allows you to tag certain file with metadata such as ",Object(r.b)("inlineCode",{parentName:"p"},"project"),". For example with this file:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),'// @intl-meta project:my-custom-project\nimport {FormattedMessage} from \'react-intl\';\n\n<FormattedMessage defaultMessage="foo" id="bar" />;\n')),Object(r.b)("p",null,"and with option ",Object(r.b)("inlineCode",{parentName:"p"},'{pragma: "@intl-meta"}'),", we'll parse out ",Object(r.b)("inlineCode",{parentName:"p"},"// @intl-meta project:my-custom-project")," into ",Object(r.b)("inlineCode",{parentName:"p"},"{project: 'my-custom-project'}")," in the result file."))}p.isMDXComponent=!0},168:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return u}));var n=a(0),o=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=o.a.createContext({}),p=function(e){var t=o.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):c({},t,{},e)),a},m=function(e){var t=p(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(a),b=n,u=m["".concat(i,".").concat(b)]||m[b]||d[b]||r;return a?o.a.createElement(u,c({ref:t},s,{components:a})):o.a.createElement(u,c({ref:t},s))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var s=2;s<r;s++)i[s]=a[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"}}]);