(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{158:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var a=n(1),r=n(9),i=(n(0),n(168)),o={id:"api",title:"Imperative API"},l={id:"react-intl/api",title:"Imperative API",description:"There are a few API layers that React Intl provides and is built on. When using React Intl you'll be interacting with its API (documented here) and its React [components][components].",source:"@site/docs/react-intl/API.md",permalink:"/docs/react-intl/api",editUrl:"https://github.com/formatjs/formatjs/edit/master/website/docs/react-intl/API.md",sidebar:"libraries",previous:{title:"Components",permalink:"/docs/react-intl/components"},next:{title:"Testing with react-intl",permalink:"/docs/react-intl/testing"}},s=[{value:"ECMAScript Internationalization API",id:"ecmascript-internationalization-api",children:[]},{value:"FormatJS Internationalization Formatters",id:"formatjs-internationalization-formatters",children:[]},{value:"React Intl API",id:"react-intl-api",children:[{value:"Injection API",id:"injection-api",children:[]},{value:"Date Formatting APIs",id:"date-formatting-apis",children:[]},{value:"Number Formatting APIs",id:"number-formatting-apis",children:[]},{value:"List Formatting APIs",id:"list-formatting-apis",children:[]}]},{value:"React Intl Components",id:"react-intl-components",children:[]}],c={rightToc:s};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"There are a few API layers that React Intl provides and is built on. When using React Intl you'll be interacting with its API (documented here) and its React ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/react-intl/components"}),"components"),"."),Object(i.b)("h2",{id:"ecmascript-internationalization-api"},"ECMAScript Internationalization API"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"React Intl uses and builds on the ",Object(i.b)("a",Object(a.a)({parentName:"strong"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl"}),"Internationalization API")," built-in to JavaScript.")),Object(i.b)("p",null,"Specifically, the built-in API is used to format dates/times and numbers in React Intl. It's good to familiarize yourself with the following APIs, ",Object(i.b)("strong",{parentName:"p"},"especially their ",Object(i.b)("inlineCode",{parentName:"strong"},"options"),":")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"}),Object(i.b)("inlineCode",{parentName:"a"},"Intl.DateTimeFormat"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat"}),Object(i.b)("inlineCode",{parentName:"a"},"Intl.NumberFormat"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules"}),Object(i.b)("inlineCode",{parentName:"a"},"Intl.PluralRules"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat"}),Object(i.b)("inlineCode",{parentName:"a"},"Intl.RelativeTimeFormat")))),Object(i.b)("p",null,"React Intl wraps these APIs in a consistent way making them easier to use, more performant through memoization, and gracefully falls back when they throw errors."),Object(i.b)("h2",{id:"formatjs-internationalization-formatters"},"FormatJS Internationalization Formatters"),Object(i.b)("p",null,"Beyond number, date & relative time formatting, React Intl provides string/message formatting. This formatter is part of the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://formatjs.io/"}),"FormatJS")," project, which React Intl is also a part of. This formatter was developed in the same style as the built-in formatters."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/formatjs/formatjs/tree/master/packages/intl-messageformat"}),Object(i.b)("inlineCode",{parentName:"a"},"IntlMessageFormat")))),Object(i.b)("p",null,"React Intl wraps these APIs in the same way it wraps the built-in Intl APIs."),Object(i.b)("h2",{id:"react-intl-api"},"React Intl API"),Object(i.b)("h4",{id:"definemessages"},Object(i.b)("inlineCode",{parentName:"h4"},"defineMessages")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"interface MessageDescriptor {\n  id: string;\n  description?: string | object;\n  defaultMessage?: string;\n}\n\nfunction defineMessages(\n  messageDescriptors: Record<string, MessageDescriptor>\n): Record<string, MessageDescriptor>;\n")),Object(i.b)("p",null,"This function is exported by the ",Object(i.b)("inlineCode",{parentName:"p"},"react-intl")," package and is simply a ",Object(i.b)("em",{parentName:"p"},"hook")," for the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/formatjs/formatjs/tree/master/packages/babel-plugin-react-intl"}),"babel-plugin-react-intl")," package to use when extracting default messages defined in JavaScript source files. This function simply returns the Message Descriptor map object that's passed-in."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import {defineMessages} from 'react-intl';\n\nconst messages = defineMessages({\n  greeting: {\n    id: 'app.home.greeting',\n    description: 'Message to greet the user.',\n    defaultMessage: 'Hello, {name}!',\n  },\n});\n")),Object(i.b)("h3",{id:"injection-api"},"Injection API"),Object(i.b)("p",null,"React Intl provides:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#useintl-hook"}),Object(i.b)("inlineCode",{parentName:"a"},"useIntl")," hook"),": to ",Object(i.b)("em",{parentName:"li"},"hook")," the imperative formatting API into a React function component (with React version >= 16.8)."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#injectintl-hoc"}),Object(i.b)("inlineCode",{parentName:"a"},"injectIntl")," HOC"),": to ",Object(i.b)("em",{parentName:"li"},"inject")," the imperative formatting API into a React class or function component via its ",Object(i.b)("inlineCode",{parentName:"li"},"props"),"."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#createintl"}),Object(i.b)("inlineCode",{parentName:"a"},"createIntl")),": to create ",Object(i.b)("inlineCode",{parentName:"li"},"IntlShape")," object outside of React lifecycle.")),Object(i.b)("p",null,"These should be used when your React component needs to format data to a string value where a React element is not suitable; e.g., a ",Object(i.b)("inlineCode",{parentName:"p"},"title")," or ",Object(i.b)("inlineCode",{parentName:"p"},"aria")," attribute, or for side-effect in ",Object(i.b)("inlineCode",{parentName:"p"},"componentDidMount"),"."),Object(i.b)("h4",{id:"useintl-hook"},Object(i.b)("inlineCode",{parentName:"h4"},"useIntl")," hook"),Object(i.b)("p",null,"If a component can be expressed in a form of function component, using ",Object(i.b)("inlineCode",{parentName:"p"},"useIntl")," hook can be handy. This ",Object(i.b)("inlineCode",{parentName:"p"},"useIntl")," hook do not expect any option as its argument when being called. Typically, here is how you would like to use:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport {useIntl, FormattedDate} from 'react-intl';\n\nconst FunctionComponent: React.FC<{date: number | Date}> = ({date}) => {\n  const intl = useIntl();\n  return (\n    <span title={intl.formatDate(date)}>\n      <FormattedDate value={date} />\n    </span>\n  );\n};\n\nexport default FunctionComponent;\n")),Object(i.b)("p",null,"To keep the API surface clean and simple, we only provide ",Object(i.b)("inlineCode",{parentName:"p"},"useIntl")," hook in the package. If preferable, user can wrap this built-in hook to make customized hook like ",Object(i.b)("inlineCode",{parentName:"p"},"useFormatMessage")," easily. Please visit React's official website for more general ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/docs/hooks-intro.html"}),"introduction on React hooks"),"."),Object(i.b)("h4",{id:"injectintl-hoc"},Object(i.b)("inlineCode",{parentName:"h4"},"injectIntl")," HOC"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"type WrappedComponentProps<IntlPropName extends string = 'intl'> = {\n  [k in IntlPropName]: IntlShape;\n};\n\ntype WithIntlProps<P> = Omit<P, keyof WrappedComponentProps> & {\n  forwardedRef?: React.Ref<any>;\n};\n\nfunction injectIntl<\n  IntlPropName extends string = 'intl',\n  P extends WrappedComponentProps<IntlPropName> = WrappedComponentProps<any>\n>(\n  WrappedComponent: React.ComponentType<P>,\n  options?: Opts<IntlPropName>\n): React.ComponentType<WithIntlProps<P>> & {\n  WrappedComponent: typeof WrappedComponent;\n};\n")),Object(i.b)("p",null,"This function is exported by the ",Object(i.b)("inlineCode",{parentName:"p"},"react-intl")," package and is a High-Order Component (HOC) factory. It will wrap the passed-in React component with another React component which provides the imperative formatting API into the wrapped component via its ",Object(i.b)("inlineCode",{parentName:"p"},"props"),". (This is similar to the connect-to-stores pattern found in many Flux implementations.)"),Object(i.b)("p",null,"By default, the formatting API will be provided to the wrapped component via ",Object(i.b)("inlineCode",{parentName:"p"},"props.intl"),", but this can be overridden when specifying ",Object(i.b)("inlineCode",{parentName:"p"},"options.intlPropName"),". The value of the prop will be of type ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#Intlshape"}),Object(i.b)("inlineCode",{parentName:"a"},"IntlShape")),", defined in the next section."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import React, {PropTypes} from 'react';\nimport {injectIntl, FormattedDate} from 'react-intl';\n\ninterface Props {\n  date: Date | number;\n}\n\nconst ClassComponent: React.FC<Props> = props => {\n  const {\n    date,\n    intl, // Injected by `injectIntl`\n  } = props;\n  return (\n    <span title={intl.formatDate(date)}>\n      <FormattedDate value={date} />\n    </span>\n  );\n};\n\nexport default injectIntl(ClassComponent);\n")),Object(i.b)("h4",{id:"intlshape"},Object(i.b)("inlineCode",{parentName:"h4"},"IntlShape")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"interface IntlConfig {\n  locale: string;\n  timeZone?: string;\n  formats: CustomFormats;\n  textComponent?: React.ComponentType | keyof React.ReactHTML;\n  messages: Record<string, string> | Record<string, MessageFormatElement[]>;\n  defaultLocale: string;\n  defaultFormats: CustomFormats;\n  onError(err: string): void;\n}\n\ninterface IntlFormatters {\n  formatDate(value: number | Date, opts: FormatDateOptions): string;\n  formatTime(value: number | Date, opts: FormatDateOptions): string;\n  formatRelativeTime(\n    value: number,\n    unit: Unit,\n    opts: FormatRelativeOptions\n  ): string;\n  formatNumber(value: number, opts: FormatNumberOptions): string;\n  formatPlural(value: number, opts: FormatPluralOptions): string;\n  formatMessage(descriptor: MessageDescriptor, values: any): string;\n}\n\ntype IntlShape = IntlConfig & IntlFormatters;\n")),Object(i.b)("p",null,"This interface is exported by the ",Object(i.b)("inlineCode",{parentName:"p"},"react-intl")," package that can be used in conjunction with the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#injectintl"}),Object(i.b)("inlineCode",{parentName:"a"},"injectIntl"))," HOC factory function."),Object(i.b)("p",null,"The definition above shows what the ",Object(i.b)("inlineCode",{parentName:"p"},"props.intl")," object will look like that's injected to your component via ",Object(i.b)("inlineCode",{parentName:"p"},"injectIntl"),". It's made up of three parts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"IntlConfig"),":")," The intl metadata passed as props into the parent ",Object(i.b)("inlineCode",{parentName:"li"},"<IntlProvider>"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"IntlFormatters"),":")," The imperative formatting API described below.")),Object(i.b)("h4",{id:"createintl"},Object(i.b)("inlineCode",{parentName:"h4"},"createIntl")),Object(i.b)("p",null,"This allows you to create an ",Object(i.b)("inlineCode",{parentName:"p"},"IntlShape")," object without using ",Object(i.b)("inlineCode",{parentName:"p"},"Provider"),". This allows you to format things outside of React lifecycle while reusing the same ",Object(i.b)("inlineCode",{parentName:"p"},"intl")," object. For example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import {createIntl, createIntlCache, RawIntlProvider} from 'react-intl'\n\n// This is optional but highly recommended\n// since it prevents memory leak\nconst cache = createIntlCache()\n\nconst intl = createIntl({\n  locale: 'fr-FR',\n  messages: {}\n}, cache)\n\n// Call imperatively\nintl.formatNumber(20)\n\n// Pass it to IntlProvider\n<RawIntlProvider value={intl}>{foo}</RawIntlProvider>\n")),Object(i.b)("h3",{id:"date-formatting-apis"},"Date Formatting APIs"),Object(i.b)("p",null,"React Intl provides three functions to format dates:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#formatdate"}),Object(i.b)("inlineCode",{parentName:"a"},"formatDate"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#formattime"}),Object(i.b)("inlineCode",{parentName:"a"},"formatTime"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#formatrelativetime"}),Object(i.b)("inlineCode",{parentName:"a"},"formatRelativeTime")))),Object(i.b)("p",null,"These APIs are used by their corresponding ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/react-intl/components#formatteddate"}),Object(i.b)("inlineCode",{parentName:"a"},"<FormattedDate>")),", ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/react-intl/components#formattedtime"}),Object(i.b)("inlineCode",{parentName:"a"},"<FormattedTime>")),", and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/react-intl/components#formattedrelative"}),Object(i.b)("inlineCode",{parentName:"a"},"<FormattedRelativeTime>"))," components and can be ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#injectintl"}),"injected")," into your component via its ",Object(i.b)("inlineCode",{parentName:"p"},"props"),"."),Object(i.b)("p",null,"Each of these APIs support custom named formats via their ",Object(i.b)("inlineCode",{parentName:"p"},"format")," option which can be specified on ",Object(i.b)("inlineCode",{parentName:"p"},"<IntlProvider>"),". Both ",Object(i.b)("inlineCode",{parentName:"p"},"formatDate")," and ",Object(i.b)("inlineCode",{parentName:"p"},"formatTime")," use ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"}),Object(i.b)("inlineCode",{parentName:"a"},"Intl.DateTimeFormat"))," options"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"See:")," The ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"}),Object(i.b)("inlineCode",{parentName:"a"},"Intl.DateTimeFormat"))," docs for details on each of these options."),Object(i.b)("h4",{id:"formatdate"},Object(i.b)("inlineCode",{parentName:"h4"},"formatDate")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"function formatDate(\n  value: number | Date,\n  options?: Intl.DateTimeFormatOptions & {format?: string}\n): string;\n")),Object(i.b)("p",null,"This function will return a formatted date string. It expects a ",Object(i.b)("inlineCode",{parentName:"p"},"value")," which can be parsed as a date (i.e., ",Object(i.b)("inlineCode",{parentName:"p"},"isFinite(new Date(value))"),"), and accepts ",Object(i.b)("inlineCode",{parentName:"p"},"options")," that conform to ",Object(i.b)("inlineCode",{parentName:"p"},"DateTimeFormatOptions"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"formatDate(Date.now(), {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n}); // \"3/4/2016\"\n")),Object(i.b)("h4",{id:"formattime"},Object(i.b)("inlineCode",{parentName:"h4"},"formatTime")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"function formatTime(\n  value: number | Date,\n  options?: Intl.DateTimeFormatOptions & {format?: string}\n): string;\n")),Object(i.b)("p",null,"This function will return a formatted date string, but it differs from ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#formatdate"}),Object(i.b)("inlineCode",{parentName:"a"},"formatDate"))," by having the following default options:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"{\n    hour: 'numeric',\n    minute: 'numeric',\n}\n")),Object(i.b)("p",null,"It expects a ",Object(i.b)("inlineCode",{parentName:"p"},"value")," which can be parsed as a date (i.e., ",Object(i.b)("inlineCode",{parentName:"p"},"isFinite(new Date(value))"),"), and accepts ",Object(i.b)("inlineCode",{parentName:"p"},"options")," that conform to ",Object(i.b)("inlineCode",{parentName:"p"},"DateTimeFormatOptions"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'formatTime(Date.now()); // "4:03 PM"\n')),Object(i.b)("h4",{id:"formatrelativetime"},Object(i.b)("inlineCode",{parentName:"h4"},"formatRelativeTime")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"type Unit =\n  | 'second'\n  | 'minute'\n  | 'hour'\n  | 'day'\n  | 'week'\n  | 'month'\n  | 'quarter'\n  | 'year';\n\ntype RelativeTimeFormatOptions = {\n  numeric?: 'always' | 'auto';\n  style?: 'long' | 'short' | 'narrow';\n};\n\nfunction formatRelativeTime(\n  value: number,\n  unit: Unit,\n  options?: Intl.RelativeTimeFormatOptions & {\n    format?: string;\n  }\n): string;\n")),Object(i.b)("p",null,'This function will return a formatted relative time string (e.g., "1 hour ago"). It expects a ',Object(i.b)("inlineCode",{parentName:"p"},"value")," which is a number, a ",Object(i.b)("inlineCode",{parentName:"p"},"unit")," and ",Object(i.b)("inlineCode",{parentName:"p"},"options")," that conform to ",Object(i.b)("inlineCode",{parentName:"p"},"Intl.RelativeTimeFormatOptions"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"formatRelativeTime(0); // \"now\"\nformatRelativeTime(-1); // \"1 second ago\"\nformatRelativeTime(1, 'hour'); // \"in 1 hour\"\nformatRelativeTime(-1, 'day', {numeric: 'auto'}); // \"yesterday\"\nformatRelativeTime(-1, 'day'); // \"1 day ago\"\nformatRelativeTime(-24, 'hour'); // \"24 hours ago\"\nformatRelativeTime(-24, 'hour', {style: 'narrow'}); // \"24 hr. ago\"\n")),Object(i.b)("h3",{id:"number-formatting-apis"},"Number Formatting APIs"),Object(i.b)("p",null,"React Intl provides two functions to format numbers:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#formatnumber"}),Object(i.b)("inlineCode",{parentName:"a"},"formatNumber"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#formatplural"}),Object(i.b)("inlineCode",{parentName:"a"},"formatPlural")))),Object(i.b)("p",null,"These APIs are used by their corresponding ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/react-intl/components#formattednumber"}),Object(i.b)("inlineCode",{parentName:"a"},"<FormattedNumber>")),", and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/react-intl/components#formattedplural"}),Object(i.b)("inlineCode",{parentName:"a"},"<FormattedPlural>"))," components and can be ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#injectintl"}),"injected")," into your component via its ",Object(i.b)("inlineCode",{parentName:"p"},"props"),"."),Object(i.b)("h4",{id:"formatnumber"},Object(i.b)("inlineCode",{parentName:"h4"},"formatNumber")),Object(i.b)("p",null,"This function uses ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat"}),Object(i.b)("inlineCode",{parentName:"a"},"Intl.NumberFormat"))," options."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"function formatNumber(\n  value: number,\n  options?: Intl.NumberFormatOptions & {format?: string}\n): string;\n")),Object(i.b)("p",null,"This function will return a formatted number string. It expects a ",Object(i.b)("inlineCode",{parentName:"p"},"value")," which can be parsed as a number, and accepts ",Object(i.b)("inlineCode",{parentName:"p"},"options")," that conform to ",Object(i.b)("inlineCode",{parentName:"p"},"NumberFormatOptions"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"formatNumber(1000); // \"1,000\"\nformatNumber(0.5, {style: 'percent'}); // \"50%\"\nformatNumber(1000, {style: 'currency', currency: 'USD'}); // $1,000\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Formatting Number using ",Object(i.b)("inlineCode",{parentName:"strong"},"unit"))),Object(i.b)("p",null,"Currently this is part of ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/tc39/proposal-unified-intl-numberformat"}),"Unified NumberFormat")," which is stage 3. We've provided a polyfill ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/formatjs/formatjs/tree/master/packages/intl-unified-numberformat"}),"here")," and ",Object(i.b)("inlineCode",{parentName:"p"},"react-intl")," types allow users to pass in a ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/formatjs/formatjs/tree/master/packages/intl-unified-numberformat"}),"sanctioned unit"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"formatNumber(1000, {\n  style: 'unit',\n  unit: 'kilobyte',\n  unitDisplay: 'narrow',\n}); // \"1,000kB\"\n\nformatNumber(1000, {\n  unit: 'fahrenheit',\n  unitDisplay: 'long',\n  style: 'unit',\n}); // \"1,000 degrees Fahrenheit\"\n")),Object(i.b)("h4",{id:"formatplural"},Object(i.b)("inlineCode",{parentName:"h4"},"formatPlural")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"type PluralFormatOptions = {\n  type?: 'cardinal' | 'ordinal' = 'cardinal';\n};\n\nfunction formatPlural(\n  value: number,\n  options?: Intl.PluralFormatOptions\n): 'zero' | 'one' | 'two' | 'few' | 'many' | 'other';\n")),Object(i.b)("p",null,"This function will return a plural category string: ",Object(i.b)("inlineCode",{parentName:"p"},'"zero"'),", ",Object(i.b)("inlineCode",{parentName:"p"},'"one"'),", ",Object(i.b)("inlineCode",{parentName:"p"},'"two"'),", ",Object(i.b)("inlineCode",{parentName:"p"},'"few"'),", ",Object(i.b)("inlineCode",{parentName:"p"},'"many"'),", or ",Object(i.b)("inlineCode",{parentName:"p"},'"other"'),". It expects a ",Object(i.b)("inlineCode",{parentName:"p"},"value")," which can be parsed as a number, and accepts ",Object(i.b)("inlineCode",{parentName:"p"},"options")," that conform to ",Object(i.b)("inlineCode",{parentName:"p"},"PluralFormatOptions"),"."),Object(i.b)("p",null,"This is a low-level utility whose output could be provided to a ",Object(i.b)("inlineCode",{parentName:"p"},"switch")," statement to select a particular string to display."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'formatPlural(0); // "other"\nformatPlural(1); // "one"\nformatPlural(2); // "other"\nformatPlural(2, {style: \'ordinal\'}); // "two"\nformatPlural(3, {style: \'ordinal\'}); // "few"\nformatPlural(4, {style: \'ordinal\'}); // "other"\n')),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," This function should only be used in apps that only need to support one language. If your app supports multiple languages use ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#formatmessage"}),Object(i.b)("inlineCode",{parentName:"a"},"formatMessage"))," instead."),Object(i.b)("h3",{id:"list-formatting-apis"},"List Formatting APIs"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"This is currently stage 3 so ",Object(i.b)("a",Object(a.a)({parentName:"strong"},{href:"https://www.npmjs.com/package/@formatjs/intl-listformat"}),"polyfill")," would be required.")),Object(i.b)("h4",{id:"formatlist"},Object(i.b)("inlineCode",{parentName:"h4"},"formatList")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"type ListFormatOptions = {\n  type?: 'disjunction' | 'conjunction' | 'unit';\n  style?: 'long' | 'short' | 'narrow';\n};\n\nfunction formatList(\n  elements: (string | React.ReactNode)[],\n  options?: Intl.ListFormatOptions\n): string | React.ReactNode[];\n")),Object(i.b)("p",null,"This function allows you to join list of things together in an i18n-safe way. For example, when the locale is ",Object(i.b)("inlineCode",{parentName:"p"},"en"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"formatList(['Me', 'myself', 'I'], {type: 'conjunction'}); // Me, myself, and I\nformatList(['5 hours', '3 minutes'], {type: 'unit'}); // 5 hours, 3 minutes\n")),Object(i.b)("h4",{id:"message-syntax"},"Message Syntax"),Object(i.b)("p",null,"String/Message formatting is a paramount feature of React Intl and it builds on ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://userguide.icu-project.org/formatparse/messages"}),"ICU Message Formatting")," by using the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://formatjs.io/guides/message-syntax/"}),"ICU Message Syntax"),". This message syntax allows for simple to complex messages to be defined, translated, and then formatted at runtime."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Simple Message:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"Hello, {name}\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Complex Message:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"Hello, {name}, you have {itemCount, plural,\n    =0 {no items}\n    one {# item}\n    other {# items}\n}.\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"See:")," The ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://formatjs.io/guides/message-syntax/"}),"Message Syntax Guide")," on the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"http://formatjs.io/"}),"FormatJS website"),"."),Object(i.b)("h4",{id:"message-descriptor"},"Message Descriptor"),Object(i.b)("p",null,"React Intl has a Message Descriptor concept which is used to define your app's default messages/strings and is passed into ",Object(i.b)("inlineCode",{parentName:"p"},"formatMessage"),". The Message Descriptors work very well for providing the data necessary for having the strings/messages translated, and they contain the following properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"id"),":")," A unique, stable identifier for the message"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"description"),":")," Context for the translator about how it's used in the UI"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"strong"},"defaultMessage"),":")," The default message (probably in English)")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"type MessageDescriptor = {\n  id: string;\n  defaultMessage?: string;\n  description?: string | object;\n};\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," The ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/formatjs/formatjs/tree/master/packages/babel-plugin-react-intl"}),"babel-plugin-react-intl")," package can be used to extract Message Descriptors defined in JavaScript source files."),Object(i.b)("h4",{id:"message-formatting-fallbacks"},"Message Formatting Fallbacks"),Object(i.b)("p",null,"The message formatting APIs go the extra mile to provide fallbacks for the common situations where formatting fails; at the very least a non-empty string should always be returned. Here's the message formatting fallback algorithm:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Lookup and format the translated message at ",Object(i.b)("inlineCode",{parentName:"li"},"id"),", passed to ",Object(i.b)("inlineCode",{parentName:"li"},"<IntlProvider>"),"."),Object(i.b)("li",{parentName:"ol"},"Fallback to formatting the ",Object(i.b)("inlineCode",{parentName:"li"},"defaultMessage"),"."),Object(i.b)("li",{parentName:"ol"},"Fallback to source of translated message at ",Object(i.b)("inlineCode",{parentName:"li"},"id"),"."),Object(i.b)("li",{parentName:"ol"},"Fallback to source of ",Object(i.b)("inlineCode",{parentName:"li"},"defaultMessage"),"."),Object(i.b)("li",{parentName:"ol"},"Fallback to the literal message ",Object(i.b)("inlineCode",{parentName:"li"},"id"),".")),Object(i.b)("p",null,'Above, "source" refers to using the template as is, without any substitutions made.'),Object(i.b)("h4",{id:"formatmessage"},Object(i.b)("inlineCode",{parentName:"h4"},"formatMessage")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"type MessageFormatPrimitiveValue = string | number | boolean | null | undefined;\nfunction formatMessage(\n  descriptor: MessageDescriptor,\n  values?: Record<string, MessageFormatPrimitiveValue>\n): string;\nfunction formatMessage(\n  descriptor: MessageDescriptor,\n  values?: Record<\n    string,\n    MessageFormatPrimitiveValue | React.ReactElement | FormatXMLElementFn\n  >\n): string | React.ReactNodeArray;\n")),Object(i.b)("p",null,"This function will return a formatted message string. It expects a ",Object(i.b)("inlineCode",{parentName:"p"},"MessageDescriptor")," with at least an ",Object(i.b)("inlineCode",{parentName:"p"},"id")," property, and accepts a shallow ",Object(i.b)("inlineCode",{parentName:"p"},"values")," object which are used to fill placeholders in the message."),Object(i.b)("p",null,"If a translated message with the ",Object(i.b)("inlineCode",{parentName:"p"},"id")," has been passed to the ",Object(i.b)("inlineCode",{parentName:"p"},"<IntlProvider>")," via its ",Object(i.b)("inlineCode",{parentName:"p"},"messages")," prop it will be formatted, otherwise it will fallback to formatting ",Object(i.b)("inlineCode",{parentName:"p"},"defaultMessage"),". See: ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#message-formatting-fallbacks"}),"Message Formatting Fallbacks")," for more details."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"const messages = defineMessages({\n  greeting: {\n    id: 'app.greeting',\n    defaultMessage: 'Hello, {name}!',\n    description: 'Greeting to welcome the user to the app',\n  },\n});\n\nformatMessage(messages.greeting, {name: 'Eric'}); // \"Hello, Eric!\"\n")),Object(i.b)("p",null,"with ",Object(i.b)("inlineCode",{parentName:"p"},"ReactElement")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"const messages = defineMessages({\n  greeting: {\n    id: 'app.greeting',\n    defaultMessage: 'Hello, {name}!',\n    description: 'Greeting to welcome the user to the app',\n  },\n});\n\nformatMessage(messages.greeting, {name: <b>Eric</b>}); // ['Hello, ', <b>Eric</b>, '!']\n")),Object(i.b)("p",null,"with rich text formatting"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"const messages = defineMessages({\n  greeting: {\n    id: 'app.greeting',\n    defaultMessage: 'Hello, <bold>{name}</bold>!',\n    description: 'Greeting to welcome the user to the app',\n  },\n});\n\nformatMessage(messages.greeting, {\n  name: 'Eric',\n  bold: str => <b>{str}</b>,\n}); // ['Hello, ', <b>Eric</b>, '!']\n")),Object(i.b)("p",null,"The message we defined using ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"#definemessages"}),Object(i.b)("inlineCode",{parentName:"a"},"defineMessages"))," to support extraction via ",Object(i.b)("inlineCode",{parentName:"p"},"babel-plugin-react-intl"),", but it doesn't have to be if you're not using the Babel plugin."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Note:")," Messages can be simple strings ",Object(i.b)("em",{parentName:"p"},"without")," placeholders, and that's the most common type of message."),Object(i.b)("h4",{id:"formatdisplayname"},Object(i.b)("inlineCode",{parentName:"h4"},"formatDisplayName")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"type FormatDisplayNameOptions = {\n  style?: 'narrow' | 'short' | 'long';\n  type?: 'language' | 'region' | 'script' | 'currency';\n  fallback?: 'code' | 'none';\n};\n\nfunction formatDisplayName(\n  value: string | number | object,\n  options?: FormatDisplayNameOptions\n): string | undefined;\n")),Object(i.b)("p",null,"Usage examples:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"// When locale is `en`\nformatDisplayName('zh-Hans-SG'); //=> Simplified Chinese (Singapore)\n// When locale is `zh`\nformatDisplayName('zh-Hans-SG'); //=> \u7b80\u4f53\u4e2d\u6587\uff08\u65b0\u52a0\u5761\uff09\n\n// When locale is `en`...\n// ISO-15924 four letters script code to localized display name\nformatDisplayName('Deva', {type: 'script'}); //=> Devanagari\n// ISO-4217 currency code to localized display name\nformatDisplayName('CNY', {type: 'currency'}); //=> Chinese Yuan\n// ISO-3166 two letters region code to localized display name\nformatDisplayName('UN', {type: 'region'}); //=> United Nations\n")),Object(i.b)("h2",{id:"react-intl-components"},"React Intl Components"),Object(i.b)("p",null,"The React components provided by React Intl allow for a declarative, idiomatic-React way of providing internationalization configuration and format dates, numbers, and strings/messages in your app."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"See:")," The ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/react-intl/components"}),"Components")," page."))}b.isMDXComponent=!0},168:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},p=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=b(n),u=a,d=p["".concat(o,".").concat(u)]||p[u]||m[u]||i;return n?r.a.createElement(d,l({ref:t},c,{components:n})):r.a.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);