// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic case: help 1`] = `
"Usage: formatjs extract [options] [files...]

Extract string messages from React components that use react-intl.
The input language is expected to be TypeScript or ES2017 with JSX.

Options:
  --messages-dir <dir>                                  The target location where the plugin will output a \`.json\` file corresponding to each component from which React Intl messages were extracted. If not provided, the extracted message descriptors will be printed to standard output.
  --enforce-descriptions                                Whether message declarations _must_ contain a \`description\` to provide context to translators. (default: false)
  --enforce-default-message                             Whether message declarations _must_ contain a \`defaultMessage\` to fallback when translations are not present. (default: true)
  --no-enforce-default-message                          
  --extract-source-location                             Whether the metadata about the location of the message in the source file should be extracted. If \`true\`, then \`file\`, \`start\`, and \`end\` fields will exist for each extracted message descriptors. (default: false)
  --module-source-name <name>                           The ES6 module source name of the React Intl package. Defaults to: \`\\"react-intl\\"\`, but can be changed to another name/path to React Intl.
  --remove-default-message                              Remove \`defaultMessage\` field in generated js after extraction (default: false)
  --additional-component-names <comma-separated-names>  Additional component names to extract messages from, e.g: \`['FormattedFooBarMessage']\`. **NOTE**: By default we check for the fact that \`FormattedMessage\` & \`FormattedHTMLMessage\` are imported from \`moduleSourceName\` to make sure variable alias works. This option does not do that so it's less safe.
  --extract-from-format-message-call                    Opt-in to extract from \`intl.formatMessage\` call with the same restrictions, e.g: has to be called with object literal such as \`intl.formatMessage({ id: 'foo', defaultMessage: 'bar', description: 'baz'})\` (default: false)
  -h, --help                                            output usage information
"
`;
