module.exports = function(grunt) {

    var libpath = require('path'),
        priority = ['second', 'minute', 'hour', 'day', 'month', 'year'],
        cldr;


    function listRootLocales() {
        var roots = {};
        cldr.localeIds.forEach(function(locale) {
            if ('root' === locale) {
                return;
            }
            roots[locale.split('_')[0]] = true;
        });
        return Object.keys(roots);
    }


    // returns a string which registers the function
    // `fn` is a json object to be serialized and massaged.
    function addLocale(locale, data) {
        var r = 'RelativeFormat.__addLocaleData({locale:"' + locale + '", relativeTime:' + JSON.stringify(data) + '});';
        r = r.replace(/\"<h\[/g, 'h[')
             .replace(/\]>\"/g, ']');
        return r;
    }


    // gnerate optimized complete locales
    // `data` is an object: keys are locales, values are objects to be serialized
    // `data` is an object: keys are tokens,  values are indexes
    function addComplete(data, hash) {
        var unique = {},    // key is stringified function, value is the index in `bodies`
            bodies = [],    // key is function unique ID, value is the function body
            locales = {},   // key is locale, value is index of func to use
            i,
            last,
            lines = ['/* This file was generated by `grunt cldr` command. */\n'];

        lines.push('import RelativeFormat from "./core";');
        lines.push('export default RelativeFormat;\n');
        lines.push('var h = ["' + Object.keys(hash).join('",\n    "') + '"];');
        Object.keys(data).forEach(function(locale) {
            lines.push(addLocale(locale, data[locale]));
        });
        return lines.join('\n');
    }


    grunt.registerTask('build_locale_data', 'rebuilds the locale data', function () {
        var config = grunt.config.data['build_locale_data'] || {},
            roots,
            hash = {},
            data = {}; // key locale, value

        try {
            cldr = require('cldr');
        } catch (err) {
            grunt.fatal("`cldr` NPM package not available. please `npm i cldr` and try again");
        }
        grunt.file.mkdir(libpath.dirname(config.dest));
        roots = listRootLocales(cldr);
        roots.forEach(function(root) {
            // if (root !== 'en' && root !== 'es') return;
            var all = cldr.extractFields(root),
                o = {};
            priority.forEach(function (i) {
                o[i] = o[i] || {};
                ['past', 'future'].forEach(function (when) {
                    o[i][when] = o[i][when] || {};
                    Object.keys(all[i].relativeTime[when]).forEach(function (key) {
                        var token = all[i].relativeTime[when][key].replace('{0}', '#');
                        // the hashing helps to reduce from 3579 to 1622 entries
                        if (!hash[token]) {
                            hash[token] = Object.keys(hash).length;
                        }
                        o[i][when][key] = '<h[' + hash[token] + ']>';
                    });
                });
            });
            data[root] = o;
        });
        grunt.file.write(config.dest, addComplete(data, hash), {encoding: 'utf8'});

        grunt.log.ok('Wrote data module in ' + config.dest);
    });

};
